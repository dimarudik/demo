events {
    worker_connections  1024;
}

http {
    upstream db01 {
         server 172.22.0.13:8080;
         server 172.22.0.12:8080;
    }
    upstream db02 {
         server 172.22.0.17:8080;
         server 172.22.0.16:8080;
    }

    map $proxy $pool {
         1 "db01";
         0 "db02";
    }

    server {
        listen  80;

        location / {
            set $proxy "";
            rewrite_by_lua_block {
                local clientId = ngx.req.get_headers()["clientid"]

                function siebelRowIdToBase10(id)
                    clientBase10 = {}
                    for word in string.gmatch(id, '([^-]+)') do
                        table.insert(clientBase10, string.format("%.0f", tonumber(word, 36)));
                    end
                    return tonumber(table.concat(clientBase10))
                end

                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(5000)
                red:set_timeouts(1000, 1000, 1000)

                local ok, err = red:connect("172.22.0.101", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                red:init_pipeline()
                red:set("5-339CVCCVD", "1")
                red:set("5-ABELKTQM", "0")
                red:set("5-6PAMOQ6V", "1")
                red:set("5-CLS23Y90", "0")
                local results, err = red:commit_pipeline()
                if not results then
                    ngx.say("failed to commit the pipelined requests: ", err)
                    return
                end

                local res, err = red:get(clientId)
                if not res then
                    ngx.say("failed to get dog: ", err)
                    return
                end

                ngx.var.proxy = res

                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end
            }
            proxy_read_timeout 500ms;
            proxy_pass http://$pool;
        }

    }
}
